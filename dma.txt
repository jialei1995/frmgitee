内部有2个DMA控制器，每个都有7个通道。
mem->periphrial与peripherial->mem传输时：
需要查看dma章节里面各个通道的dma请求一览表，例如uart1的rx与tx如果
用到dma功能的话用的通道肯定是不一样的，dmax的某个通道用于某个外设的
传输功能后就不能被其他外设再用了。每个通道对应不同外设的几个功能
具体用到哪个外设得自己看了。

针对mem->mem的dma所有通道都可以使用。


多个dma请求同时发生：同一时刻dma1的通道3与4都有dma请求怎么处理呢？
仲裁器：软件阶段-CCR（通道优先级）
		硬件阶段：同样的软件优先级，同一个dma通道编号小的优先级大
				两个dma控制器优先级：DMA1的优先级高于DMA2的优先级

dma初始化结构体：
外设地址：cpar->例如如果这里数据来源是adc->dr寄存器，需要将adc->dr寄存器地址写到这里
存储器地址：cmar->如果是从内存里面的变量中来，需要将对应的变量地址放到这里
传输方向：ccr:dir->从外设读/从存储器读 m->p 或者p->m
		mem2mem：单独的bit写传输方向是mem->mem
		方向取值：DMA_DIR_PeripheralDST	将外设作为目的地址
				DMA_DIR_PeripheralSRC   将外设设为源地址
传输数目：cndtr 16bit的reg所以最多传65535个单位的数据
传输单位：外设数据宽度配置：ccr->pzise 8bit 16bit 32bit
		mem数据宽度配置：ccr->msize 8bit 16bit 32bit
		这两个宽度必须一致。也可以不一致，不一致的时候如果宽度大的数据往宽度小的位置存就会丢失数据
						如果宽度小的数据往宽度大的位置存，就会浪费宽度大的位置的空间。也不是不能传
外设地址是否递增：ccr->pinc periphralincrease
外设数据是否递增：ccr->minc memincrease
什么时候传输结束：ccr->circ 循环模式

最开始需要初始化相应的dma所在的总线，再定义一个函数初始化dma控制器的结构体并且初始化dma控制器。

定义变量的时候前面加const，则这个变量就放到flash里面了
------------
软件模拟iic：自己根据iic协议特点去控制引脚电平写函数，包括start,stop,ack,nack
硬件iic：直接利用硬件提供的通讯信号，包括start,stop,ack,nack信号
若使用硬件iic，才可以监控各种状态寄存器，软件模拟iic的话，就没有用到iic控制器，没法监控状态reg。

iic作为主机写：流程分析
--start信号
具体硬件iic的start信号怎么产生呢？
直接往iic的cr寄存器的start-bit写1就会产生起始信号。
怎么表示起始信号成功产生呢？
读SR寄存器的SB-bit，为0表示未发送其实信号，为1表示已发送起始信号---这个就是EV5事件
--EV6与EV8事件
主设备发送从机地址加读写bit后，从机需要检测EV6事件->sr寄存器的addr（cpu作为主机时，1表示地址发送结束，0表示地址发送还未结束。cpu作为从机时，0与1又有不同的意思）
数据是否发送完成？
看EV8事件：读sr寄存器的txe位，为1表示数据寄存器为空，已发送完成，为0表示dr寄存器不空，没发送完成
--EV8_2事件
在发送stop信号之前需要检测移位寄存器是否为空，iic的发送数据不是只靠数据寄存器的，是dr先发给移位寄存器，
然后移位寄存器再往出去发，所以这里发送stop信号之前还需要检测移位寄存器是否为空。
sr寄存器的BTF位：为1表示移位寄存器为空了，即数据发送完成。
--stop信号的产生
往cr寄存器的stop-bit写1就是产生结束信号，这个不需要再检测sr寄存器了，只要写1就一定会成功的产生stop信号

--
每个状态的检测都是在收到从机的ack信号之后才检测的哦，不是直接检测的（除start信号是直接发完就直接检测sr）
其实最后编程的时候还是会有库函数可以直接调用的，只是库函数里面的写法与我们自己io模拟的写法不一样。
--

iic作为主机读：流程分析
--start信号
cr：start写1，检测sr：sbbit
--发送器件地址后，检测EV6事件检测地址是否发送完成
--从机发送数据之后会存放到dr，注意IIC的dr寄存器既可以用来接收也可以用来发送，不是只有一个功能的
--接收到数据之后需要检测ev7事件，看sr寄存器的rxen数据寄存器是否为空，0表示为空，1表示非空可读。
--ack怎么产生的？cr寄存器的ack-bit，写1就是产生ack 

--
发送ack表示还想继续接收，另一边就不能停，直到这边发送nack才能停。
--
注意那些sr寄存器的状态位每次读完都要清除，不然影响以后的判断。

具体程序写流程：
i2c_init();//定义结构体并初始化
{
	clock_speed,需要<400k
	mode，可选iic或者smbus
	dutycycle，时钟占空比，随便选一个，没啥用
	ownaddr，自身寄存器地址，与总线上其他地址不一样就行
	ack，使能或者关闭ack。一般都是使能
	ackownledgeaddr，规定上面的ownaddr长度，7bit或10bit
}
i2c_generatesStart(i2c1,enable);产生起始信号,disable不产生 这里面并没判断是否成功产生，还是需要读取status状态位判断是否成功产生起始信号。

i2c_generatesStop(i2c1,enable);产生结束信号,disable不产生

读取事件：
i2c_getFlagstatus(i2c1,取值看手册)

i2c_send7bitaddr(i2cx,器件地址，dir); dir读还是写
i2c_senddata()

i2c_receivedata();返回接收到的数据，byte

i2c_acknowledgeConfig(i2cx,status)；enable，disable控制发送ack或者nack信号。

i2c_cmd(i2cx,enable)；使能控制器

有的iic的eeprom有写保护功能，就是拉高某个引脚才能写，拉低就不能写。其实我们可以不使用这个，永久拉高，
因为数据一般是不会乱窜的，不需要保护。

NC引脚：有的器件引出来的引脚写个nc，就是不需要链接的引脚，没啥用。可能设计师想着以后这个脚可能有啥用，
预留出来的，现在啥用没有，不用管。
--
软件模拟的iic各个函数实现：
i2c_start()
{
	sda_1();
	scl_1();//开始sda与scl都是1
	delay();//延时，手册里面有这个延时必须持续多久以上。高电平必须延时多久才能证明这会有过高电平
			//低电平也必须延时多久才可以。如果没有延时，直接转换高低电平，sys都不知道你到底有没有拉过电平呀
	sda_0();//拉低sda
	delay();//延时
	scl_0();//拉低scl，不然外部没法往sda写数据了
	delay();
}
i2c_stop()
{
	sda_0();
	scl_1();//sda是0，scl是1
	delay();//延时
	sda_1();//拉高sda，则停止
}

