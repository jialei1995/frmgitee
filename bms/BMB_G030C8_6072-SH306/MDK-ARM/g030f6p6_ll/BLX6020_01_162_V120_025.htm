<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [g030f6p6_ll\BLX6020_01_162_V120_025.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image g030f6p6_ll\BLX6020_01_162_V120_025.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Oct 19 12:55:38 2021
<BR><P>
<H3>Maximum Stack Usage =        372 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RS485_Process &rArr; PCMonitor_Process &rArr; Send485DataToPC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[f]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from stm32g0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from stm32g0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from stm32g0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g0xx_it.o(i.HardFault_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g0xx_it.o(i.NMI_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32g0xx_it.o(i.PendSV_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from stm32g0xx_it.o(i.RTC_TAMP_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32g0xx_it.o(i.SVC_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32g0xx_it.o(i.SysTick_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from system_stm32g0xx.o(i.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from stm32g0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from stm32g0xx_it.o(i.TIM16_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from stm32g0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from stm32g0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[20]">fputc</a> from usart.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[1d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ec]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ed]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolFilter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2RxDataPro
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableT_Coefficient
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSG
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_CHG
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellVolt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Percent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleCount_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTDS_SIF_process
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFSIFProtocol
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCellVolt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableV_SOC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableT_Coefficient
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle_Integral
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCUR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemainCap_Integral
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCUR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemainCap_Integral
</UL>

<P><STRONG><a name="[f0]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRArgDataToPC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArgDataToPC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_IICPort_Init
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ab]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[f4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>ADC_Calibration</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, adc.o(i.ADC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[e5]"></a>ADC_Disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(i.ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[e2]"></a>ADC_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[2e]"></a>ADC_GetValue</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, adc.o(i.ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ADC_GetValue &rArr; VolFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolFilter
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WaitSampleOver
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[e3]"></a>ADC_SelecteChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(i.ADC_SelecteChannel))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[30]"></a>ADC_WaitSampleOver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.ADC_WaitSampleOver))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
</UL>

<P><STRONG><a name="[32]"></a>AlarmCheck</STRONG> (Thumb, 734 bytes, Stack size 32 bytes, app_alarm.o(i.AlarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AlarmCheck &rArr; SH_ClrAlarm &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GET_RTC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_ClrAlarm
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGDSG_MOS_CheckOK
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[33]"></a>AlarmFilter</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, app_alarm.o(i.AlarmFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AlarmFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrAlarmProcess
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmCheck
</UL>

<P><STRONG><a name="[37]"></a>BalanceCtrl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_volt.o(i.BalanceCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BalanceCtrl &rArr; SH_BALANCESET &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_BALANCESET
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeBalance
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[3a]"></a>BootCmd_Process</STRONG> (Thumb, 212 bytes, Stack size 128 bytes, bsp_sifbus.o(i.BootCmd_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = BootCmd_Process &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBUS_SendMsg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16_Calculate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_QueryDataPack
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Protocol
</UL>

<P><STRONG><a name="[3f]"></a>CCAlarm_RProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_current.o(i.CCAlarm_RProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CCAlarm_RProcess &rArr; SH_CHGR_CHECK &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_CHGR_CHECK
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[41]"></a>CFSIFProtocol</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, bsp_sifbus.o(i.CFSIFProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CFSIFProtocol &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFBUS_SendMsg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_xor
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
</UL>

<P><STRONG><a name="[35]"></a>CHGDSG_MOS_CheckOK</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app_alarm.o(i.CHGDSG_MOS_CheckOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHGDSG_MOS_CheckOK
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmCheck
</UL>

<P><STRONG><a name="[cc]"></a>CRC8</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, app_bms.o(i.CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>

<P><STRONG><a name="[44]"></a>CheckFlash</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_flash.o(i.CheckFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckFlash &rArr; Flash_ReadPara
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheck
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[3b]"></a>Crc16_Calculate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_sifbus.o(i.Crc16_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
</UL>

<P><STRONG><a name="[47]"></a>CurrAlarmProcess</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, app_current.o(i.CurrAlarmProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CurrAlarmProcess &rArr; Update_Current &rArr; SH_GetCUR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Current
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentStateDetect
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[49]"></a>CurrentStateDetect</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, app_current.o(i.CurrentStateDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CurrentStateDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrAlarmProcess
</UL>

<P><STRONG><a name="[4b]"></a>CycleCount_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_soc.o(i.CycleCount_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CycleCount_Init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>Cycle_Integral</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, app_soc.o(i.Cycle_Integral))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Cycle_Integral &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[4d]"></a>DCAlarm_RProcess</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_current.o(i.DCAlarm_RProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCAlarm_RProcess &rArr; SH_LOAD_CHECK &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_LOAD_CHECK
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_ClrAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[42]"></a>Data_xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_sifbus.o(i.Data_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Data_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFSIFProtocol
</UL>

<P><STRONG><a name="[4f]"></a>DeepSleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_lowpower.o(i.DeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DeepSleep &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleepCheck
</UL>

<P><STRONG><a name="[51]"></a>DeepSleepCheck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_lowpower.o(i.DeepSleepCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DeepSleepCheck &rArr; DeepSleep &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32g0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveRisingFlag_0_31
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFallingFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveRisingFlag_0_31
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFallingFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32g0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveRisingFlag_0_31
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFallingFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Enter_StopMode</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app_lowpower.o(i.Enter_StopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Enter_StopMode &rArr; bsp_init &rArr; MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWakeUpTimer_IT
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CloseWEAK_EXTI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_OpenAlarmInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Stop_ENable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepCheck
</UL>

<P><STRONG><a name="[58]"></a>Enter_Stop_ENable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_lowpower.o(i.Enter_Stop_ENable))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[73]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[e4]"></a>Find_Adc_Temp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_temprature.o(i.Find_Adc_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Find_Adc_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[5c]"></a>FlashInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_flash.o(i.FlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FlashInit &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashParaSetDefault
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFlash
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>FlashParaSetDefault</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, app_flash.o(i.FlashParaSetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashParaSetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[45]"></a>Flash_ReadPara</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, app_flash.o(i.Flash_ReadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_ReadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFlash
</UL>

<P><STRONG><a name="[3e]"></a>Flash_WritePara</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, app_flash.o(i.Flash_WritePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheck
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>

<P><STRONG><a name="[59]"></a>GPIO_CloseWEAK_EXTI</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(i.GPIO_CloseWEAK_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_CloseWEAK_EXTI
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[c2]"></a>GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_WaitAck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_ReadByte
</UL>

<P><STRONG><a name="[93]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUartTxDataPro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_WaitAck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_SendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_ReadByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_NAck
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Ack
</UL>

<P><STRONG><a name="[67]"></a>GTDS_SIF_process</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, bsp_sifbus.o(i.GTDS_SIF_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GTDS_SIF_process &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_QueryDataPack
</UL>

<P><STRONG><a name="[34]"></a>GT_GET_RTC</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, rtc.o(i.GT_GET_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GT_GET_RTC
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmCheck
</UL>

<P><STRONG><a name="[d3]"></a>GT_TIM16_CMD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tim.o(i.GT_TIM16_CMD))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUartTxDataPro
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBUS_SendMsg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFBUS_SendMsg
</UL>

<P><STRONG><a name="[d2]"></a>GT_TIM_SET_AUTORELOAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(i.GT_TIM_SET_AUTORELOAD))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBUS_SendMsg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFBUS_SendMsg
</UL>

<P><STRONG><a name="[da]"></a>GT_TIM_SET_COUNTER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tim.o(i.GT_TIM_SET_COUNTER))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUartTxDataPro
</UL>

<P><STRONG><a name="[db]"></a>GT_UART2_CMD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.GT_UART2_CMD))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Disable
</UL>

<P><STRONG><a name="[46]"></a>GetCheck</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_flash.o(i.GetCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFlash
</UL>

<P><STRONG><a name="[69]"></a>GetClibrationDiff_Current</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_current.o(i.GetClibrationDiff_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetClibrationDiff_Current &rArr; SH_GetCUR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCUR
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[6b]"></a>GetFactor_Cali_CHG</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, app_soc.o(i.GetFactor_Cali_CHG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetFactor_Cali_CHG &rArr; Get_TableV_SOC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCali_CHG_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableV_SOC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealRemainCap_Calibration
</UL>

<P><STRONG><a name="[6e]"></a>GetFactor_Cali_DSG</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, app_soc.o(i.GetFactor_Cali_DSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetFactor_Cali_DSG &rArr; Get_TableV_SOC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCali_DSG_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableV_SOC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealRemainCap_Calibration
</UL>

<P><STRONG><a name="[70]"></a>GetFactor_Cali_DSGTempCoeff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_soc.o(i.GetFactor_Cali_DSGTempCoeff))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetFactor_Cali_DSGTempCoeff &rArr; Get_TableT_Coefficient &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableT_Coefficient
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealRemainCap_Calibration
</UL>

<P><STRONG><a name="[60]"></a>GetPage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash.o(i.GetPage))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
</UL>

<P><STRONG><a name="[72]"></a>Get_Percent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_soc.o(i.Get_Percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Percent &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[71]"></a>Get_TableT_Coefficient</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_soc.o(i.Get_TableT_Coefficient))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Get_TableT_Coefficient &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSGTempCoeff
</UL>

<P><STRONG><a name="[6d]"></a>Get_TableV_SOC</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, app_soc.o(i.Get_TableV_SOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_TableV_SOC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSG
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_CHG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, flash.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
</UL>

<P><STRONG><a name="[63]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
</UL>

<P><STRONG><a name="[62]"></a>HAL_FLASH_Program</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
</UL>

<P><STRONG><a name="[5f]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>JudgeBalance</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, app_volt.o(i.JudgeBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JudgeBalance
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCtrl
</UL>

<P><STRONG><a name="[8b]"></a>LL_ADC_DeInit</STRONG> (Thumb, 260 bytes, Stack size 12 bytes, stm32g0xx_ll_adc.o(i.LL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[8d]"></a>LL_ADC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g0xx_ll_adc.o(i.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[8e]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g0xx_ll_adc.o(i.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[94]"></a>LL_EXTI_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32g0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[74]"></a>LL_GPIO_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32g0xx_ll_gpio.o(i.LL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_ReleaseReset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8c]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32g0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_IICPort_Init
</UL>

<P><STRONG><a name="[77]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[78]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[7c]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[7d]"></a>LL_RTC_DATE_Init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_DATE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[9d]"></a>LL_RTC_DATE_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_DATE_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[7e]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[81]"></a>LL_RTC_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[82]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[9c]"></a>LL_RTC_TIME_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_TIME_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[80]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[e0]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[84]"></a>LL_TIM_DeInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
</UL>

<P><STRONG><a name="[a2]"></a>LL_TIM_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32g0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[87]"></a>LL_USART_Init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32g0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[4a]"></a>LL_mDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g0xx_ll_utils.o(i.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFBUS_SendMsg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_StrlVCAD
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_EnterLowPower
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrAlarmProcess
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_ClrAlarm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>

<P><STRONG><a name="[88]"></a>MOS_Ctrl</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, app_mos.o(i.MOS_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MOS_Ctrl &rArr; SH_MOSCtrl &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_MOSCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[8a]"></a>MX_ADC1_Init</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_ADC1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[91]"></a>MX_EXTI_Init</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, gpio.o(i.MX_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_EXTI_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetEXTISource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
</UL>

<P><STRONG><a name="[99]"></a>MX_GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[9b]"></a>MX_RTC_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_RTC_Init &rArr; LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_StructInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_StructInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[9e]"></a>MX_TIM16_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tim.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM16_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a3]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a8]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>PCMonitor_Process</STRONG> (Thumb, 544 bytes, Stack size 224 bytes, pcmonitor_protocol.o(i.PCMonitor_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = PCMonitor_Process &rArr; Send485DataToPC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRArgDataToPC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArgDataToPC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Process
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>Process_100ms_CYC</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, app_bms.o(i.Process_100ms_CYC))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Process_100ms_CYC &rArr; CurrAlarmProcess &rArr; Update_Current &rArr; SH_GetCUR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Current
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetSFlag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetBSTATUS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemainCap_Integral
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_Ctrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClibrationDiff_Current
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAlarm_RProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle_Integral
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentStateDetect
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrAlarmProcess
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAlarm_RProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Process_500ms_CYC1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_bms.o(i.Process_500ms_CYC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Process_500ms_CYC1 &rArr; Update_CellVolt &rArr; SH_StrlVCAD &rArr; SH_GetSFlag &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellVolt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_ClrOrSetCtrl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepCheck
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealRemainCap_Calibration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Percent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleepCheck
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCtrl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[7b]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[79]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[bb]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[dc]"></a>RS485Check</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pcmonitor_protocol.o(i.RS485Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Check
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRArgDataToPC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArgDataToPC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
</UL>

<P><STRONG><a name="[bc]"></a>RS485_Process</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pcmonitor_protocol.o(i.RS485_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = RS485_Process &rArr; PCMonitor_Process &rArr; Send485DataToPC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>RS485_SendByte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usart.o(i.RS485_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RS485_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRArgDataToPC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendArgDataToPC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataToPC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[68]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GET_RTC
</UL>

<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.RTC_TAMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>RealRemainCap_Calibration</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_soc.o(i.RealRemainCap_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RealRemainCap_Calibration &rArr; GetFactor_Cali_DSG &rArr; Get_TableV_SOC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSGTempCoeff
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSG
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_CHG
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[b3]"></a>RemainCap_Integral</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, app_soc.o(i.RemainCap_Integral))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RemainCap_Integral &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[aa]"></a>RingBuf_Read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pcmonitor_protocol.o(i.RingBuf_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RingBuf_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[bd]"></a>RingBuf_Write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pcmonitor_protocol.o(i.RingBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RingBuf_Write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>SH30x_I2C_Ack</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_simiic.o(i.SH30x_I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SH30x_I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
</UL>

<P><STRONG><a name="[c0]"></a>SH30x_I2C_NAck</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_simiic.o(i.SH30x_I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SH30x_I2C_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
</UL>

<P><STRONG><a name="[c1]"></a>SH30x_I2C_ReadByte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_simiic.o(i.SH30x_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SH30x_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
</UL>

<P><STRONG><a name="[c3]"></a>SH30x_I2C_SendByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsp_simiic.o(i.SH30x_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SH30x_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>

<P><STRONG><a name="[c4]"></a>SH30x_I2C_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_simiic.o(i.SH30x_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SH30x_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>

<P><STRONG><a name="[c5]"></a>SH30x_I2C_Stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_simiic.o(i.SH30x_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SH30x_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_IICPort_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>

<P><STRONG><a name="[c6]"></a>SH30x_I2C_WaitAck</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bsp_simiic.o(i.SH30x_I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>

<P><STRONG><a name="[c7]"></a>SH30x_IICPort_Init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, bsp_simiic.o(i.SH30x_IICPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SH30x_IICPort_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_init
</UL>

<P><STRONG><a name="[c9]"></a>SH30x_ReadData</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bsp_sh36730x.o(i.SH30x_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIIC_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCellVolt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCellTemp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCUR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetSFlag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetBSTATUS
</UL>

<P><STRONG><a name="[cb]"></a>SH30x_WriteData</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsp_sh36730x.o(i.SH30x_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_WaitAck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_BALANCESET
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_StrlVCAD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_MOSCtrl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_OpenAlarmInt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_EnterLowPower
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_LOAD_CHECK
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_CHGR_CHECK
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_ClrAlarm
</UL>

<P><STRONG><a name="[cd]"></a>SH30x_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bsp_sh36730x.o(i.SH30x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SH30x_init &rArr; SH30x_IICPort_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_IICPort_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetSFlag
</UL>

<P><STRONG><a name="[39]"></a>SH_BALANCESET</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_BALANCESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_BALANCESET &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCtrl
</UL>

<P><STRONG><a name="[40]"></a>SH_CHGR_CHECK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_CHGR_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_CHGR_CHECK &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAlarm_RProcess
</UL>

<P><STRONG><a name="[36]"></a>SH_ClrAlarm</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_ClrAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_ClrAlarm &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAlarm_RProcess
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmCheck
</UL>

<P><STRONG><a name="[50]"></a>SH_EnterLowPower</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_EnterLowPower &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>

<P><STRONG><a name="[b1]"></a>SH_GetBSTATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_GetBSTATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SH_GetBSTATUS &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
</UL>

<P><STRONG><a name="[6a]"></a>SH_GetCUR</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_sh36730x.o(i.SH_GetCUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SH_GetCUR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Current
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClibrationDiff_Current
</UL>

<P><STRONG><a name="[ce]"></a>SH_GetCellTemp</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_sh36730x.o(i.SH_GetCellTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SH_GetCellTemp &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellTemps
</UL>

<P><STRONG><a name="[cf]"></a>SH_GetCellVolt</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bsp_sh36730x.o(i.SH_GetCellVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SH_GetCellVolt &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellVolt
</UL>

<P><STRONG><a name="[b2]"></a>SH_GetSFlag</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bsp_sh36730x.o(i.SH_GetSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SH_GetSFlag &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_StrlVCAD
</UL>

<P><STRONG><a name="[4e]"></a>SH_LOAD_CHECK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_LOAD_CHECK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_LOAD_CHECK &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAlarm_RProcess
</UL>

<P><STRONG><a name="[89]"></a>SH_MOSCtrl</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_MOSCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_MOSCtrl &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_Ctrl
</UL>

<P><STRONG><a name="[55]"></a>SH_OpenAlarmInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_sh36730x.o(i.SH_OpenAlarmInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SH_OpenAlarmInt &rArr; SH30x_WriteData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[d0]"></a>SH_StrlVCAD</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_sh36730x.o(i.SH_StrlVCAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SH_StrlVCAD &rArr; SH_GetSFlag &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetSFlag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_CellVolt
</UL>

<P><STRONG><a name="[43]"></a>SIFBUS_SendMsg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_simuart.o(i.SIFBUS_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SIFBUS_SendMsg &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM_SET_AUTORELOAD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM16_CMD
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFSIFProtocol
</UL>

<P><STRONG><a name="[d4]"></a>SIFProcess</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_sifbus.o(i.SIFProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SIFProcess &rArr; SUART_Protocol &rArr; BootCmd_Process &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Protocol
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFSIFProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>SIF_TIM_IRQPro</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_simuart.o(i.SIF_TIM_IRQPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SIF_TIM_IRQPro &rArr; SifTxDataPro &rArr; SUart_Read_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUartTxDataPro
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>SIIC_ReadData</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bsp_sh36730x.o(i.SIIC_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_WaitAck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_SendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_ReadByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_NAck
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_ReadData
</UL>

<P><STRONG><a name="[d5]"></a>SUART_Protocol</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_simuart.o(i.SUART_Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SUART_Protocol &rArr; BootCmd_Process &rArr; Flash_WritePara &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
</UL>

<P><STRONG><a name="[d7]"></a>SUartTxDataPro</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, bsp_simuart.o(i.SUartTxDataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SUartTxDataPro &rArr; SUart_Read_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM_SET_COUNTER
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM16_CMD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_TIM_IRQPro
</UL>

<P><STRONG><a name="[d1]"></a>SUart_Read_Disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_simuart.o(i.SUart_Read_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SUart_Read_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_UART2_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBUS_SendMsg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFBUS_SendMsg
</UL>

<P><STRONG><a name="[d9]"></a>SUart_Read_Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_simuart.o(i.SUart_Read_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SUart_Read_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_UART2_CMD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUartTxDataPro
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Send485DataToPC</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, pcmonitor_protocol.o(i.Send485DataToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Send485DataToPC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendByte
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[ae]"></a>SendArgDataToPC</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, pcmonitor_protocol.o(i.SendArgDataToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SendArgDataToPC &rArr; RS485_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendByte
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[ad]"></a>SendRArgDataToPC</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pcmonitor_protocol.o(i.SendRArgDataToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendRArgDataToPC &rArr; RS485_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendByte
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Process
</UL>

<P><STRONG><a name="[57]"></a>SetWakeUpTimer_IT</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rtc.o(i.SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[d8]"></a>SifTxDataPro</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, bsp_simuart.o(i.SifTxDataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SifTxDataPro &rArr; SUart_Read_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM_SET_COUNTER
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM16_CMD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_TIM_IRQPro
</UL>

<P><STRONG><a name="[ba]"></a>SleepCheck</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, app_lowpower.o(i.SleepCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SleepCheck &rArr; Enter_StopMode &rArr; bsp_init &rArr; MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[56]"></a>Sleep_PinInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, gpio.o(i.Sleep_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Sleep_PinInit &rArr; MX_EXTI_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[b9]"></a>Soc_ClrOrSetCtrl</STRONG> (Thumb, 318 bytes, Stack size 20 bytes, app_soc.o(i.Soc_ClrOrSetCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Soc_ClrOrSetCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[b7]"></a>Soc_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_soc.o(i.Soc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Soc_Init &rArr; Get_TableV_SOC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocInitEnable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TableV_SOC
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[bf]"></a>Soft_Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_bms.o(i.Soft_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_WaitAck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_SendByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_ReadByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_NAck
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_I2C_Ack
</UL>

<P><STRONG><a name="[df]"></a>SysParaInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_config.o(i.SysParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysParaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_stm32g0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.TIM14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM16_IRQHandler &rArr; SIF_TIM_IRQPro &rArr; SifTxDataPro &rArr; SUart_Read_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_TIM_IRQPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>UART2RxDataPro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_simuart.o(i.UART2RxDataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART2RxDataPro &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>UARTBUS_SendMsg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_simuart.o(i.UARTBUS_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTBUS_SendMsg &rArr; SUart_Read_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM_SET_AUTORELOAD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_TIM16_CMD
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUart_Read_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
</UL>

<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32g0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; RingBuf_Write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32g0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; UART2RxDataPro &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2RxDataPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>Update_CellTemps</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_temprature.o(i.Update_CellTemps))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Update_CellTemps &rArr; ADC_GetValue &rArr; VolFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelecteChannel
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCellTemp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Adc_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[b5]"></a>Update_CellVolt</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, app_volt.o(i.Update_CellVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Update_CellVolt &rArr; SH_StrlVCAD &rArr; SH_GetSFlag &rArr; SH30x_ReadData &rArr; SIIC_ReadData &rArr; SH30x_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_StrlVCAD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCellVolt
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
</UL>

<P><STRONG><a name="[48]"></a>Update_Current</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_current.o(i.Update_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Update_Current &rArr; SH_GetCUR &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_GetCUR
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrAlarmProcess
</UL>

<P><STRONG><a name="[31]"></a>VolFilter</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, adc.o(i.VolFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VolFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
</UL>

<P><STRONG><a name="[e6]"></a>__0printf$1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f9]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[5d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_simuart.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SifTxDataPro
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5b]"></a>bsp_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bsp_init &rArr; MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_StopMode
</UL>

<P><STRONG><a name="[20]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[6c]"></a>isCali_CHG_Enable</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, app_soc.o(i.isCali_CHG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isCali_CHG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_CHG
</UL>

<P><STRONG><a name="[6f]"></a>isCali_DSG_Enable</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, app_soc.o(i.isCali_DSG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isCali_DSG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFactor_Cali_DSG
</UL>

<P><STRONG><a name="[de]"></a>isSocInitEnable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, app_soc.o(i.isSocInitEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isSocInitEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_Init
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = main &rArr; RS485_Process &rArr; PCMonitor_Process &rArr; Send485DataToPC &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIFProcess
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_BALANCESET
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_500ms_CYC1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_100ms_CYC
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePara
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleCount_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CloseWEAK_EXTI
</UL>

<P><STRONG><a name="[65]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CloseWEAK_EXTI
</UL>

<P><STRONG><a name="[92]"></a>LL_EXTI_SetEXTISource</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.LL_EXTI_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[96]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[95]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[9a]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_PinInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[64]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CloseWEAK_EXTI
</UL>

<P><STRONG><a name="[98]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[97]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_EXTI_Init
</UL>

<P><STRONG><a name="[8f]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(i.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetSamplingTimeCommonChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[9f]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tim.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[a1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tim.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[a0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tim.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[a4]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a7]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.LL_USART_ConfigAsyncMode))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usart.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[53]"></a>LL_EXTI_IsActiveFallingFlag_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.LL_EXTI_IsActiveFallingFlag_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>LL_EXTI_IsActiveRisingFlag_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.LL_EXTI_IsActiveRisingFlag_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>LL_IOP_GRP1_ForceReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_gpio.o(i.LL_IOP_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
</UL>

<P><STRONG><a name="[76]"></a>LL_IOP_GRP1_ReleaseReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_gpio.o(i.LL_IOP_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>LL_RTC_DATE_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_DATE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[83]"></a>LL_RTC_TIME_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g0xx_ll_rtc.o(i.LL_RTC_TIME_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_TIME_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[85]"></a>LL_APB2_GRP1_ForceReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_tim.o(i.LL_APB2_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[86]"></a>LL_APB2_GRP1_ReleaseReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_ll_tim.o(i.LL_APB2_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DeInit
</UL>

<P><STRONG><a name="[3c]"></a>SIF_QueryDataPack</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bsp_sifbus.o(i.SIF_QueryDataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SIF_QueryDataPack &rArr; GTDS_SIF_process &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTDS_SIF_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootCmd_Process
</UL>

<P><STRONG><a name="[c8]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_simiic.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH30x_IICPort_Init
</UL>

<P><STRONG><a name="[e7]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
