qmainwindow（菜单栏，工具栏）与qdialog（对话框）都是继承qwidget，
qwidget的父类是所有对象的祖宗QOBJECT
QApplication a(argc, argv);//应用程序对象，有且只有一个
myWidget w; //实例化窗口对象
ctrl+shift+↑/↓ 将当前行移动到上方或者下方
同名的.h与.cpp切换，按键F4
选中多行，按ctrl+i自动对齐多行
查看帮助文档：打开bin文件夹下的assistant.exe 可以直接打开帮助文档
Qdialog：对话框（里面一般按钮较少，登陆页面啦、出错界面、下一步界面）
.pro中的target=test生成的exe的名称就是text.exe
Q_OBJECT 有这个宏表示允许使用信号和槽机制
函数声明与定义中只有1个里面允许有默认参数=0...
	btn的op：settext（“设置文本”）；
			setparent（this）；-------直接Qpushbutten * btn = new Qpushbutten（“文本”，this）；设置到对象树中
			move（100,100）；坐标从左上角开始数
			resize（100,100）；

	qt里面私有属性里面一般都是qpushubutten * btn；然后在构造函数中new出来的
	也可以在类里面直接QPushButton btn;在构造函数中settext，setparent

	窗口设置标题直接：setwindowtitle（“窗口标题”）；
	设置固定的窗口大小：setfixedsize（600,400）；
	调整窗口大小。直接resize（600,400）；其实可以this->resize()。也可以默认直接resize就可以。

	qDebug（）<<“sadasd”；
	或者qDebug（“sadasdd”）；自动换行的
对象树，创建的时候由上至下，析构的时候由下至上，只要是下级属于上级的对象，析构的时候父对象会帮你析构
子对象的析构函数自己还是得去实现，只是这个函数的调用是父对象去管理的，并不是它帮忙实现的。

                也可以写成&Mybut::clicked,this,&Mybut::close，必须是类名，如果子类继承父类自然信号函数也继承了。
				不可以直接写对象或者对象地址，必须写类::信号
	connect(&btn,&QPushButton::clicked,this,&QPushButton::close);
			信号发出对象地址				信号接收对象地址
			信号类型地址					槽函数地址
	connect(sock,SIGNAL(connected()),this,SLOT(on_connected()));
			SIGNAL（默认会选择sock的父类里面的信号，不用再加作用域了括号中的函数要加参数类型
	connect(sock,SIGNAL(error(QAbstractSocket::SocketError)),this,SLOT(on_error()));
								这是error信号的参数类型，不用加形参名		

	connect(sock,SIGNAL(error(QAbstractSocket::SocketError)),this,SLOT(on_error()));
	connect连接中信号只写类型不写形参，slot可以参数比signal少。
				槽函数声明的时候信号也可以只写类型，不写形参，在定义的时候再写形参。
	注意自定义的类才可以自定义信号和槽函数&&&&&&：自定义槽函数时要在头文件中加：
	public slots:   信号加到signals：下。自定义的信号只需要头文件声明一下就好了,不需要实现
	返回值是void，可以有参数，可以重载。
    								 void btn_deal();
	槽函数直接写到public中即可，类似普通的函数
	返回值void，需要声明，也需要实现，可以有参数，也可以重载
	
	信号与槽都写完之后只需要connect即可，然后等着触发此信号即可。
	exp:在widget中connect(t1,&Teachar::hungry,st,&Student::eat);
	
   	自定义的信号怎么触发这个信号呢？？	
   	可以在widget中定义一个普通的函数，调用这个函数就会emit signal
   	{
   		emit t1->hungry();		//通过在widget的构造函数中调用这个函数去发信号。构造函数在创建mywidget的时候就会执行内部所有的东西
   	}

    如果自定义的类不属于任何别控件，应该让他继承与QObject-----这样他就不用管自己的内存释放了。这个类会管理内存的...

    connect信号可以连接信号的***，触发信号1则触发信号2
	
    QString转char*；s.toutf8().data(); qstring->qbytearray->char*
	qstring打印时默认带“”，char *打印时不带“”

	对于重载的signal函数与slot函数调用的时候函数名字都一样怎么区分呀？
	通过制定函数类型：
	void (Teacher::var)(QString) = &Teachar::hungry;  定义的(sig或者slot一样)函数指针变量var就是&Teachar::hungry，
	而且这个变量指向，返回值void，参数是qstring的hungry，而不是空入参的hungry。

    1个新号怎么调用多个槽函数呢？用lambda表达式
    lambda表达式：定义并创建匿名函数对象  
    [=](){		[]中放：	=等号用的最多  	&
    	btn->settext("12");
    };中括号小括号大括号
	connect(btn,&QPushubutton::clicked,this,[=]()
	{
		this->close();
		emit 另一个信号()；
		...外面的变量函数都能在这里面调用。。。
	})
	如何新建另一个窗口？？connect按钮按下则调用lambda表达式【=】（）{
		QDialog dlg；
		dlg。exec（）；就ok了
	}
	qt资源文件：添加文件->resource file->open in edit->设置路径名，以后用资源的时候复制路径就可以

	qt样式表：控件的样式
		设置按键，label，主窗口的样子-背景字体...
	qt的lable还可以显示图片，gif，可跳转的域名
		

	事件类似一个个的软件中断*****	
	qt中所有的事件类都继承与qevent	，bool event（QEvent*）ev）函数不直接处理事件，而是按照事件类型分派给
	特定的事件处理函数。在函数体内把自己想处理的事处理一下，其他事件交给父类处理，你不可能处理所有的事件。
	qwidget中定义了很多事件处理函数都是虚的，可以在子类重新实现的。
	protected ：
	***事件不用connect，写好了发生就可以触发事件函数。	
	QString str = QString("abc %1 ^_^ %2").arg(123).arg("mike");
		str = abc 123 ^_^ mike  类似sprintf
	鼠标按下事件：在一个mylabel的类中实现的
	但是键盘按下的键得在mywidget中实现，因为键盘按下的事件只有主窗口才能收到，但是鼠标的按下事件是按在了label中，mylabel可以接收到
	定时器也一种事件：timerevent。可以在mywidget中重写虚函数
					同时定时器需要在mtwidget中去starttimer

	图片：绘图看例子，很详细
		QPmixmap pix；pix.load("路径")。设置参数
		p.draw(0,0,pix);

	
	主窗口控制事件分发：
			在mainwindow中：重定义event（）将传进来的实体化的QEvent *e事件，根据类型选择对应的处理函数
								{
									switch事件（e->type（））
									 == xxx    mousemove事件；
									 == xxx    closeevent事件；
								}
	连接sqlite：
	messageBox:：warning（this，“wrong”）出错弹出对话框用到。


	qt的静态库要自己编译所以一般使用动态库。
	将写好的qt程序编译成release版本，copy生成的app.exe到一个新目录，qtshell，Qt命令行(左下角)
			然后用windeployqt.exe ./app.exe操作，会将它需要的动态库文件都放到此文件夹
			或者：cd /d D:\现在新建的存app.exe的目录   F:as\d\d\d\windeployqt.exe .\自己的.exe
	代码编译不一定非要用qt软件内点击鼠标：
			1.直接使用qmake.exe进行qmake，然后使用mingw32-make.exe进行make就会生成app.exe。 
	qt中函数alt+enter自动补全
	
易错点：定义变量放在.h文件中，不然.c中其他函数无法访问。
     在当前类的.cpp文件中访问当前类的成员，可以通过this->shuxing（fun）或者直接调用成员属性（方法），不加this都可以。

串口收发参考连接：https://blog.csdn.net/qq_39017187/article/details/88935705
