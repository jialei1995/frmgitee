import QtQuick 2.15
import QtQuick.Window 2.15

Window {
    width: 640
    height: 480
    visible: true
    title: qsTr("Hello World")

    //thislabel上支持全局变量的增加，tab切换，esc取消绑定
    //thlabel支持减少 ，tab切换 不支持esc取消绑定 按esc没作用
    property int spacePress:0
    Text {
        id: thislabel
        text:"thislabel"+spacePress+"times"
        onTextChanged: function(text){
            console.log("text change to:",text,"focus is",focus,"thatlabel focus=",focus)
        }
        focus: true
        Keys.onSpacePressed: {increase()}
        Keys.onEscapePressed: (thislabel.text="")
        function increase(){
            spacePress++;
        }
        KeyNavigation.tab: thatlabel  //tab切换光标
    }

    Text {
        x:15;y:15
        id: thatlabel
        text:"thatlabel"+spacePress+"times"
        onTextChanged: function(text){
            console.log("thatlabel text change to:",text,"focus is",focus)
        }
        Keys.onSpacePressed: {decrease()}
        function decrease(){
            spacePress--;
        }
        focus: false
        KeyNavigation.tab: thislabel
    }


}


新建类qml文件：添加类文件的时候首字母必须大写
import QtQuick 2.15
//封装自己设计的button
Rectangle{
    id:button
    x:12;y:12
    width: 116;height: 26
    color:"blue"
    Text {
        text: qsTr("start")
    }
    MouseArea{
        anchors.fill: parent
        onClicked: {
            txtname.text =" clicked"
        }
    }
}


在main.qml直接调用即可
//添加类文件的时候首字母必须大写
Button{
}
以上的button太局限，内部初始化内容是start 按键按下只能修改txtname id的内容，如果外面没有这个id，则报错


//封装自己设计的button
Rectangle{
    id:button
    x:12;y:12
    width: 116;height: 26
    color:"blue"
    Text {
        id:label
        text: qsTr("start")
    }
    MouseArea {
        anchors.fill: parent
        onClicked: {
            button.clicked() 外部按下按键时 发送信号
        }
    }
    //新增button的内部属性 text 外界给此属性赋值，直接付给label.text
    property alias text: label.text
    signal clicked  新增信号 外界可以通过此信号访问到内部的onClicked
}

Button{
    text: "kaishi"  通过给text属性赋值 给内部传参数
    //chgtext: "is anxia"
    onClicked: {
        testid.text="anniu被点击"
    }
}

Item {
    id: root
    //放到root中的属性信号可以被外部访问
    property alias text: label.text
    signal clicked
    Rectangle{
        id:button
        x:12;y:12
        width: 116;height: 26
        color:"blue"
        Text {
            id:label
            text: qsTr("start")
        }
        MouseArea {
            anchors.fill: parent
            onClicked: {
                root.clicked()
            }
        }

    }
}


//可点击图片制作
import QtQuick 2.15
import QtQuick.Window 2.15

Window {
    width: 640
    height: 480
    visible: true
    title: qsTr("click World")

    //放到代码最上面表示先绘制，这里表示点击空白处复位
    MouseArea{
        anchors.fill: parent
        onClicked: {
            qq1.x=10
            qq2.rotation=0
            qq3.rotation=0
            qq3.scale=1
        }
    }
    //为什么要创建ClickableImg  因为Image本身无onClicked属性
    //但是我们自己作类 可以给他增加属性
    ClickableImg{
        id:qq1
        x:10;y:10
        source:"./img/QQ.png"
        onClicked: {
            qq1.x+=10
        }
    }

    ClickableImg{
        id:qq2
        x:150;y:10
        source:"./img/QQ.png"
        onClicked: {
            rotation+=10
        }
    }

    ClickableImg{
        id:qq3
        x:250;y:10
        source:"./img/QQ.png"
        onClicked: {
            rotation+=10
            scale+=0.1
        }
    }

Image{   直接在文件中这样写无法使图片动起来 还是因为Image无法收到clicked信号
        id:qq1
        x:10;y:10
        source:"./img/QQ.png"
        MouseArea{
            onClicked: {
                qq1.x+=10
            }
        }
    }


}

ClickableImg。qml
Image {
    id:root
    signal clicked  //给类增加属性
    MouseArea{
        anchors.fill: parent
        onClicked: {
            root.clicked()
        }
    }
}
	
