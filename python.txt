'''
二维list转  numpy

a=[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]  必须是方形的list才能直接转成numpy
m=numpy.array(a)  

不是方形的数组  打印出来 不易观察

ret=list()   创建一维数组
row=list()  创建里面的行数组
ret.append(row)  将行的数组添加到一维数组ret中，则ret就成了二维数组 

'''
list 增加数据 方法：l.append(data)  赋值 不能直接用数组名加索引的方法
直接定义l=list()   l[x]直接赋值失败  因为没有申请控件   append里面会申请空间

若：l=[1,2,3,4]   赋值的索引在定义的长度之内可以直接赋值修改  超过长度去赋值 就会out of range
l[0]=1
l[1]=2

树结构的应用：
堆排序：
	大顶堆 小顶堆 -->都是完全二叉树-----查找方便（nLogn）
赫夫曼树（哈夫曼树）：
	所有叶子结点的带权路径长度之和最小的树（权重*离根距离）权值越大的结点
	离根结点越近的二叉树才是最优二叉树。之和最小的就是赫夫曼树
	（重点：）让权值小的节点远离根节点，让权值大的节点靠近根节点
哈夫曼编码：
	处理一句话：i like like like java do you like a java    // 共40个字符(包括空格)
	1. 源码直接解析成ascii的话 需要336个二进制数，才能表达
	
	2：d:1 y:1 u:1 j:2  v:2  o:2  l:4  k:4  e:4 i:5  a:5   :9  // 各个字符对应的个数
	  按照各个字符出现的次数进行编码，原则是出现次数越多的，则编码越小，
	  比如 空格出现了9 次， 编码为0 ,其它依次类推
	  0=  ,  1=a, 10=i, 11=e, 100=k, 101=l, 110=o, 111=v, 1000=j, 1001=u, 1010=y, 1011=d
	  这样编码 可以少很多10 （无法解析  写代码的人 知道怎么写  解数据的人不会解析10 01 
	   不知道怎么打断点）
	
	3.按照上面字符出现的次数构建一颗赫夫曼树， 次数作为权值，根据
	赫夫曼编码表确定具体字符的编码
	根据赫夫曼树，给各个字符的编码 ：向左的路径为 0 ；向右的路径为1（因为是二进制，需要
							      用1/0确定唯一字符）
	o: 1000   u: 10010  d: 100110  y: 100111  i: 101
	a: 110    k: 1110   e: 1111    j: 0000    v: 0001
	l: 001     : 01
	因为 从根到每个节点只有一条路径 则每个10的组合都对应唯一 的字符
二叉排序树（二叉搜索树）：
平衡二叉树	
	
	





